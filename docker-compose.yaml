---
version: '3.8'

services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.38.0
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      # - '--web.enable-remote-write-receiver'
      # - '--web.enable-admin-api'
    ports:
      - "3001:9090"

  grafana:
    container_name: grafana
    image: grafana/grafana:9.3.1
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml
      - ./grafana/dashboards/default:/dashboards/default
      - ./rabbitmq-server/deps/rabbitmq_prometheus/docker/grafana/dashboards:/dashboards/rabbitmq
      - ./percona-grafana-dashboards/dashboards/PostgreSQL:/dashboards/postgres
      - ./percona-grafana-dashboards/dashboards/MongoDB:/dashboards/mongodb
      - ./redis-exporter/contrib/grafana_prometheus_redis_dashboard.json:/dashboards/redis/dashboard.yaml
    env_file:
      - ./grafana/config.env
    user: "104"
    ports:
      - "3003:3000"

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    depends_on:
      - prometheus
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    cap_add:
      - IPC_LOCK
      - SYS_TIME
    ports:
      - "127.0.0.1:9100:9100"
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: cadvisor
    restart: unless-stopped
    command:
      - '--docker_only=true'
      - '--store_container_labels=false'
    depends_on:
      - prometheus
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk:/dev/disk/:ro
      # - /cgroup:/cgroup:ro # on MacOs is not working
    # TODO: it's bad to launch with privileges - then how?
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      # UI
      - '127.0.0.1:9081:8080'

  postgres_exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres_exporter
    restart: unless-stopped
    # TODO: configure via env file
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:password@postgres:5432/postgres?sslmode=disable

  mongo_exporter:
    image: percona/mongodb_exporter:0.35.0
    container_name: mongo_exporter
    restart: unless-stopped
    # TODO: configure via env file
    command:
      - '--mongodb.uri=mongodb://mongodb-router:27017'

  redis_exporter:
    image: oliver006/redis_exporter:v1.45.0
    container_name: redis_exporter
    restart: unless-stopped
    # TODO: configure via env file
    environment:
      - REDIS_ADDR=redis://redis:6379

  jaeger:
    container_name: jaeger
    hostname: jaeger
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    volumes:
      - jaeger_data:/badger
    ports:
      - "127.0.0.1:6831:6831/udp"
      - "127.0.0.1:16686:16686"
      - "127.0.0.1:14268:14268"
    environment:
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_KEY=/badger/key
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_SPAN_STORE_TTL=168h0m0s


volumes:
  prometheus_data:
  grafana_data:
  jaeger_data:

networks:
  default:
    external:
      name: monitoring-network
